.data
	indent: .asciiz "\n"
.text
	addi $s0, $zero, 0				#initialize s0 to 0
	addi $s0, $zero, 4294934528			#set s0 to beginning address of soduku puzzle
	addi $s1, $zero, 4294934608			#set s1 to be the end of the soduku puzzle for reading purposes
	add $t0, $zero, $s0				#initialize t0 to be the incremental address for reading the puzzle
	addi $a0, $zero, 0				#initialize a0 to be the data at the soduku cell
	addi $t2, $zero, 0				#initialize t2 to be a counter determining whether there needs to be a newline
	
readPuzzle:
	beq $t2, 9, indentPuzzle			#add an indent if t2 is at the end of a column
	lb $a0, 0($t0)					#load byte from current address into t1
	addi $v0, $zero, 1				#set up v0 to print an int
	syscall						#print integer in soduku cell
	beq $t0, $s1, readPuzzleEnd			#if the address in t0 is the end of the puzzle go to the end
	addi $t0, $t0, 1				#increment address of t0
	addi $t2, $t2, 1				#increment t2
	j readPuzzle					#if we are not at the end of the puzzle keep going

indentPuzzle:
	la $a0, indent 					#load a newline into a0
	addi $v0, $zero, 4				#set up v0 to print a string
	syscall						#print a newline
	addi $t2, $zero, 0				#reset t2 to zero
	j readPuzzle					#jump back to reading the puzzle
	
readPuzzleEnd:
	addi $a0, $zero, 0				#initialize a0 to be the offset from the beginning of the puzzle, 0 at the start
	jal _solveSoduku				#solve the soduku puzzle
	addi $v0, $zero, 10				#set up v0 to end program
	syscall						#terminate program

#solves the soduku puzzle using recursion &backtracking
#a0 - offset from beginning of puzzle
_solveSoduku:
	addi $sp, $sp, -24       	 		#Push stack pointer by 20
   	sw $ra, 20($sp)         	 		#Store ra in sp
   	sw $s5, 16($sp)					#store address in s5
   	sw $s4, 12($sp)         	 		#Store s4 in sp
   	sw $s3, 8($sp)          	 		#Store s3 in sp
   	sw $s2, 4($sp)          	 		#Store s2 in sp
   	sw $s1, 0($sp)          	 		#Store s1 in sp
    	addi $s1, $a0, 0        	 		#store a0 in s1
    	beq  $s1, 81, solveDiff  	 		#If a0(s1) is outside the board, then the puzzle is solved
    	addi $s4, $zero, 9      	 		#Set s4 to max row and column indexes
   	div $s1, $s4            	 		#Divide the counter by the size
    	mflo $s2                 	 		#If the offset is divisible by 9 then the quotient is the row index
    	mfhi $s3                	 		#s3 is always the remainder of the integer division
    	addi $s4, $zero, 1				#set s4 to 1, first number to look for
    	add $s5, $s0, $s1		 		#make s5 value of beginning address + offset
   	lb $t0, 0($s5) 	  	 	 		#Load current cell's value in $t0
    	beq $t0, 0, solveLoop     	 		#If t0 is 0, the cell is empty and a guess can be made
    	addi $a0, $s1, 1        	 		#If t0 is not 0, increment a0 
    	jal _solveSoduku        			#Move onto next cell
   	j solveReturn     		 		#return to caller
   	
   	solveLoop:
    		addi $a0, $s4, 0			#set a0 to be the number looked for
    		addi $a1, $s2, 0             		#Set a1 to be row index
    		jal _checkRow				#jump to checkRow 
    		beq $v0, 1, solveSame			#If the row contained the guess, v0 will be 1 and we should move on
   		add $a1, $s3, 0				#set a1 to be column index
    		jal _checkColumn			#jump to checkColumn
   		beq $v0, 1, solveSame			#If the column contained the guess, v0 will be 1 and we shold move on
    		addi $a1, $s2, 0			#set a1 to be the row index
    		addi $a2, $s3, 0			#set a2 to be the column index
    		jal _checkSubgrid			#check the subgrid at this row and indes
    		beq $v0, 1, solveSame			#if the subgrid contained the guess, v0 will be 1 and we shold move on
    		sb $s4, 0($s5)		        	#if the row, column, and subgrid did not contain the guess then we're in the clear and can store our guess
		addi $a0, $s1, 1             		#increment the counter
    		jal _solveSoduku                	#recursively call itself
   		beq $v0, 0, solveReturn         	#return if v0 equals 0
		solveSame:
    			addi $s4, $s4, 1		#increase s4 by 1
    			bne $s4, 10, solveLoop       	#see if the new guess works
    			sb $zero, 0($s5) 	 	#if nothing worked, reset the cell and go back
    			addi $v0, $zero, 1              #make v0 1
    			j solveReturn			#jump to solveReturn
		solveDiff:
    			addi $v0, $zero, 0		#set v0 to 0
    			j solveReturn			#jump to solveReturn
    		solveReturn:
    			lw $s1, 0($sp)           	#load s0 from sp
    			lw $s2, 4($sp)           	#load s1 form sp
    			lw $s3, 8($sp)           	#laod s2 from sp
    			lw $s4, 12($sp)          	#load s3 from sp
    			lw $s5, 16($sp)			#load s5 from sp
    			lw $ra, 20($sp)         	#load ra from sp
    			addi $sp, $sp, 24          	#pop stack
    			jr $ra          		#return to caller
		

#determines whether a given number a0 is in a row index of a1
#a0 - number to look for
#a1 - row index
#v0 - 1 or 0 depending on whether a0 is in the row
_checkRow:
    	addi $t0, $zero, 9                		#initialize t0 to 9
    	mul $t1, $a1, $t0         			#multiply t0 by row # to get offset and store in t1 9*rowindex = offset, inverse of previous function offset / 9 = rowindex
	checkRowLoop:
		add $t7, $s0, $t1			#add initial address and offset to get load address
  		lb $t2, 0($t7)   			#load the byte from the above address
    		beq $a0, $t2, checkRowSame  		#if number is found jump to checkRowSame
    		addi $t1, $t1, 1           		#increase offset by 1
    		sub $t0, $t0, 1           		#decrement counter
    		bne $t0, 0, checkRowLoop        	#loop back as long as counter is not at zero
    		j checkRowDiff				#if no matches found go to checkRowSame
    	checkRowSame:
		addi $v0, $zero, 1			#if there is a match set v0 to 1
		jr $ra					#return to caller
	checkRowDiff:
		addi $v0, $zero, 0			#if there is no match set v0 to 0
		jr $ra					#return to caller

#determines if a given number a0 is in a given column index of a1
#a0 - number to look for
#a1 - column index
#v0 - 1 or 0 depending whether a0 is in the column
_checkColumn:
    	addi $t1, $a1, 0              			#move column index into t1
	checkColumnLoop:
		add $t7, $s0, $t1			#add initial address to offset and store in t7
		lb $t2, 0($t7)   			#store value of cell in t2
    		beq $a0, $t2, checkColumnSame  		#if the number is in the column, go to checkColumnSame
    		addi $t1, $t1, 9           		#increment t1 by 9
    		ble $t1, 81, checkColumnLoop    	#loop if t1 is less thank 81
    		j checkColumnDiff			#if we are at the end there is no match		
	checkColumnSame:
		addi $v0, $zero, 1			#if there is a match set v0 to 1
		jr $ra					#return to caller
	checkColumnDiff:
		addi $v0, $zero, 0			#if there is no match set v0 to 0
		jr $ra					#return to caller

#determines if a given number a0 is in a given subgrid with row and column indeces a1 and a2 respectively
#a0 - number to look for
#a1 - row index
#a2 - column index
#v0 - 1 or 0 depending on whetehr a0 is in the subgrid
_checkSubgrid:
    	div $t0, $a1, 3           			#set t0 to the row index divided by 3(subrid is 1/3 of a row)
    	mul $t0, $t0, 27          			#multiply t0 by 27 to offset it
   	div $t1, $a2, 3           			#set t1 to the column index divided by 3(Subgrid is 1/3 of column)
    	mul $t1, $t1, 3           			#multiply t1 by 27 to offset
    	add $t1, $t0, $t1         			#offset needed is the sum of both
    	li $t0, 3                			#make t0 row counter
    	li $t3, 3                			#make t3 column counter
	checkSubgridLoop:
		add $t7, $s0, $t1			#make t7 the address to load 
    		lb $t2, 0($t7)	   			#value of the current cell
    		beq $a0, $t2, checkSubgridSame  	#if the number loaded is what we are looking for, go to checkSubgridSame
    		sub $t3, $t3, 1               		#decrease column counter by 1
    		beq $t3, 0, checkSubgridRow     	#check if we are at the end of the row
    		addi $t1, $t1, 1           		#increment t1
    		j checkSubgridLoop             		#loop back
	checkSubgridRow:
    		addi $t1, $t1, 7              		#move t1 to the next row
    		li $t3, 3               		#reset column counter
    		sub $t0, $t0, 1          		#decrease row counter by 1
    		bne $t0, 0, checkSubgridLoop    	#if there are more rows, keep going
    		j checkSubgridDiff			#if no more rows, go to checkSubgridDiff
    	checkSubgridDiff:
    		addi $v0, $zero, 0           		#if no match found, make v0 0
    		jr $ra					#return to caller	
	checkSubgridSame:
   		 addi $v0, $zero, 1          		#If a match is found, make v0 1
   		 jr $ra					#return to caller
	
	
	
